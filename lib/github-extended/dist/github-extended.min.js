"use strict";function _typeof(e){return e&&"undefined"!=typeof Symbol&&e.constructor===Symbol?"symbol":typeof e}!function(e,n){if("function"==typeof define&&define.amd)define("Github",["exports","github-api"],n);else if("undefined"!=typeof exports)n(exports,require("github-api"));else{var t={exports:{}};n(t.exports,e.Github),e.Github=t.exports}}(this,function(e,n){function t(e){return e&&e.__esModule?e:{"default":e}}function r(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function o(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!==("undefined"==typeof n?"undefined":_typeof(n))&&"function"!=typeof n?e:n}function u(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}Object.defineProperty(e,"__esModule",{value:!0});var i=t(n),s=function(e){function n(e){r(this,n);var t=o(this,Object.getPrototypeOf(n).call(this,e)),u=t.getRepo,i=t.request||t._request;return t.getRepo=function(n,t){function r(e){return new Promise(function(n,t){e.show(function(e,r){e&&t(e),n(r)})})}var o=u(n,t),s=o.remove,f=o.fork;return o.search=function(e){var n=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],t="blob",r="tree";return n=Object.assign({branch:"master",caseSensitive:!1,excludeFiles:!1,excludeFolders:!1},n),new Promise(function(e,t){o.getSha(n.branch,"",function(n,r){n&&t(n),e(r)})}).then(function(e){return new Promise(function(n,t){o.getTree(e+"?recursive=true",function(e,r){e&&(404===e.error?n([]):t(e)),n(r)})})}).then(function(o){var u=new RegExp(e,n.caseSensitive?"":"i");return o.filter(function(e){var o=n.excludeFiles?e.type!==t:!0,i=n.excludeFolders?e.type!==r:!0,s=function(e){return e.substring(e.lastIndexOf("/")+1)};return o&&i&&u.test(s(e.path))})})},o.mergePullRequest=function(e){var n=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];return n=Object.assign({commitMessage:"Merged pull request gh-"+e.number},n),r(o).then(function(t){return new Promise(function(r,o){i("PUT","/repos/"+t.full_name+"/pulls/"+e.number+"/merge",{commit_message:n.commitMessage,sha:e.head.sha},function(e,n){e&&o(e),r(n)})})})},o.remove=function(){function e(e,n){return new Promise(function(t,r){s(e,n,function(e){e&&r(e),t()})})}function n(){return new Promise(function(e,n){o.getRef("heads/"+t,function(t,r){t&&n(t),e(r)})}).then(function(e){return new Promise(function(n,t){o.getTree(e+"?recursive=true",function(e,r){e&&t(e),n(r)})})}).then(function(n){var o=Promise.resolve();return n.filter(function(e){return 0===e.path.indexOf(r)&&"blob"===e.type}).map(function(e){return e.path}).forEach(function(n){o=o.then(function(){return e(t,n)})}),o})}var t=arguments.length<=0||void 0===arguments[0]?"master":arguments[0],r=arguments.length<=1||void 0===arguments[1]?"":arguments[1];r=r.replace(/\/$/,"");var u=e(t,r);return u.then(function(){return u},function(e){if(422!==e.error)throw e;return n()})},o.fork=function(){return new Promise(function(n,r){f(function(o,i){function s(e){e.contents("master","",function(t,r){r?n(i):setTimeout(s.bind(null,e),250)})}o?r(o):s(u(e.username,t))})})},o},t}return u(n,e),n}(i["default"]);e["default"]=s});
//# sourceMappingURL=github-extended.min.js.map
